name: fake-flow

on:
  push:
    branches:
      - '*' # "*"即係全部branches都要做，但係其實真版有d flow淨係production先會做(如deployment)，而加fake既試住先
  workflow_dispatch:

env:
  POSTGRES_DB: ci
  POSTGRES_USER: ci
  POSTGRES_PASSWORD: ci
  SERVER_HOST: 52.74.240.230
  SERVER_USER: ubuntu
  SERVER_DIR: /home/ubuntu/ci

jobs:
  build-node:
    runs-on: ubuntu-latest
    container: node:lts-alpine
    steps:
      - uses: actions/checkout@v3
      - name: install deps
        working-directory: server
        run: |
          mkdir node_modules
          touch node_modules/prod
          touch node_modules/dev
      - name: build project
        working-directory: server
        run: |
          mkdir dist
          touch dist/file
      - name: archive built files
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: server/dist
  test-node:
    needs: build-node
    runs-on: ubuntu-latest
    container: node:lts-alpine
    services:
      db:
        image: postgres:latest
        env:
          POSTGRES_DB: ${{env.POSTGRES_DB}}
          POSTGRES_USER: ${{env.POSTGRES_USER}}
          POSTGRES_PASSWORD: ${{env.POSTGRES_PASSWORD}}
        ports:
          - 5432:5432
    env:
      PORT: 8080
      DB_HOST: db
      DB_PORT: 5432
    steps:
      - uses: actions/checkout@v3
      - name: restore built files
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: server/dist
      - name: check built files
        working-directory: server
        run: |
          ls dist/file
      - name: install deps
        working-directory: server
        run: |
          mkdir node_modules
          touch node_modules/prod
      - name: migrate db
        working-directory: server
        run: |
          ls migrations/*.ts
      - name: run test
        working-directory: server
        run: |
          node -p '"ok"'
  build-docker:
    needs: build-node
    runs-on: ubuntu-latest
    container: docker:20.10.21-alpine3.16
    steps:
      - uses: actions/checkout@v3
      - name: restore built files
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: server/dist
      - name: check built files
        working-directory: server
        run: |
          ls dist/file
      - name: build docker image
        working-directory: server
        run: |
          docker build -t fake .
      - name: export docker image
        run: |
          mkdir docker-files
          cp docker-compose.yml docker-files/
          docker save fake > docker-files/fake.img
      - name: archive docker files
        uses: actions/upload-artifact@v3
        with:
          name: docker-files
          path: docker-files
  setup-ssh:
    runs-on: ubuntu-latest
    steps:
      - name: setup ssh files
        run: |
          cd
          mkdir -p .ssh
          cd .ssh
          echo "${{secrets.SSH_PRIVATE_KEY}}" > id_rsa
          chmod 400 id_rsa
          ssh-keyscan ${{env.SERVER_HOST}} >> known_hosts
          echo "" >> config
          echo "Host server" >> config
          echo "  Hostname ${{env.SERVER_HOST}}" >> config
          echo "  User ${{env.SERVER_USER}}" >> config
          pwd
          find
      - name: check ssh connection
        run: |
          ssh server "docker ps"
      - name: archive ssh setup
        uses: actions/upload-artifact@v3
        with:
          name: .ssh
          path: ~/.ssh
  deploy-docker:
    needs:
      - build-docker
      - test-node
      - setup-ssh
    runs-on: ubuntu-latest
    steps:
      - name: restore ssh setup
        uses: actions/download-artifact@v3
        with:
          name: .ssh
          path: ssh-tmp
      - name: check ssh connection
        run: |
          mv ssh-tmp ~/.ssh
          cd ~/.ssh
          chmod 400 id_rsa
          ssh server whoami
      - name: restore docker image
        uses: actions/download-artifact@v3
        with:
          name: docker-files
      - name: check docker image
        run: |
          file fake.img
          file docker-compose.yml
      - name: upload docker files
        run: |
          rsync -SavLPz fake.img server:${{env.SERVER_DIR}}
          ssh server "docker load < ${{env.SERVER_DIR}}/fake.img"
          rsync -SavLPz docker-compose.yml server:${{env.SERVER_DIR}}
          ssh server "cd ${{env.SERVER_DIR}} && cat docker-compose.yml"
